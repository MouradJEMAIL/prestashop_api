// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'product.dart';

// **************************************************************************
// JsonSerializableGenerator
// **************************************************************************

_$ProductImpl _$$ProductImplFromJson(Map<String, dynamic> json) =>
    _$ProductImpl(
      id: json['id'] as int,
      idManufacturer: json['idManufacturer'] as String?,
      idSupplier: json['idSupplier'] as String?,
      idDefaultCategory: json['idDefaultCategory'] as String?,
      isNew: json['isNew'] as bool?,
      cacheDefaultAttribute: json['cacheDefaultAttribute'] as bool?,
      idDefaultImage: json['idDefaultImage'] as String?,
      idDefaultCombination: json['idDefaultCombination'] as int?,
      idTaxRulesGroup: json['idTaxRulesGroup'] as String?,
      positionInCategory: json['positionInCategory'] as String?,
      manufacturerName: json['manufacturerName'] as bool?,
      quantity: json['quantity'] as String?,
      type: json['type'] as String?,
      idShopDefault: json['idShopDefault'] as String?,
      reference: json['reference'] as String?,
      supplierReference: json['supplierReference'] as String?,
      location: json['location'] as String?,
      width: json['width'] as String?,
      height: json['height'] as String?,
      depth: json['depth'] as String?,
      weight: json['weight'] as String?,
      quantityDiscount: json['quantityDiscount'] as String?,
      ean13: json['ean13'] as String?,
      isbn: json['isbn'] as String?,
      upc: json['upc'] as String?,
      mpn: json['mpn'] as String?,
      cacheIsPack: json['cacheIsPack'] as String?,
      cacheHasAttachments: json['cacheHasAttachments'] as String?,
      isVirtual: json['isVirtual'] as bool?,
      state: json['state'] as bool?,
      additionalDeliveryTimes: json['additionalDeliveryTimes'] as String?,
      deliveryInStock: json['deliveryInStock'] as String?,
      deliveryOutStock: json['deliveryOutStock'] as String?,
      productType: json['productType'] as String?,
      onSale: json['onSale'] as bool?,
      onlineOnly: json['onlineOnly'] as bool?,
      ecotax: json['ecotax'] as String?,
      minimalQuantity: json['minimalQuantity'] as String?,
      lowStockThreshold: json['lowStockThreshold'] as String?,
      lowStockAlert: json['lowStockAlert'] as bool?,
      price: json['price'] as String?,
      wholesalePrice: json['wholesalePrice'] as String?,
      unity: json['unity'] as String?,
      unitPriceRatio: json['unitPriceRatio'] as String?,
      additionalShippingCost: json['additionalShippingCost'] as String?,
      customizable: json['customizable'] as String?,
      textFields: json['textFields'] as String?,
      uploadableFiles: json['uploadableFiles'] as String?,
      active: json['active'] as bool?,
      redirectType: json['redirectType'] as String?,
      idTypeRedirected: json['idTypeRedirected'] as String?,
      availableForOrder: json['availableForOrder'] as bool?,
      availableDate: json['availableDate'] == null
          ? null
          : DateTime.parse(json['availableDate'] as String),
      showCondition: json['showCondition'] as bool?,
      condition: json['condition'] as String?,
      showPrice: json['showPrice'] as bool?,
      indexed: json['indexed'] as String?,
      visibility: json['visibility'] as String?,
      advancedStockManagement: json['advancedStockManagement'] as String?,
      dateAdd: json['dateAdd'] == null
          ? null
          : DateTime.parse(json['dateAdd'] as String),
      dateUpd: json['dateUpd'] == null
          ? null
          : DateTime.parse(json['dateUpd'] as String),
      packStockType: json['packStockType'] as String?,
      metaDescription: json['metaDescription'] as String?,
      metaKeywords: json['metaKeywords'] as String?,
      metaTitle: json['metaTitle'] as String?,
      linkRewrite: json['linkRewrite'] as String?,
      name: json['name'] as String?,
      description: json['description'] as String?,
      descriptionShort: json['descriptionShort'] as String?,
      availableNow: json['availableNow'] as String?,
      availableLater: json['availableLater'] as String?,
      priceTaxIncluded: json['priceTaxIncluded'] as String?,
      priceTaxExcluded: json['priceTaxExcluded'] as String?,
      associations: json['associations'] == null
          ? null
          : ProductAssociations.fromJson(
              json['associations'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$$ProductImplToJson(_$ProductImpl instance) =>
    <String, dynamic>{
      'id': instance.id,
      'idManufacturer': instance.idManufacturer,
      'idSupplier': instance.idSupplier,
      'idDefaultCategory': instance.idDefaultCategory,
      'isNew': instance.isNew,
      'cacheDefaultAttribute': instance.cacheDefaultAttribute,
      'idDefaultImage': instance.idDefaultImage,
      'idDefaultCombination': instance.idDefaultCombination,
      'idTaxRulesGroup': instance.idTaxRulesGroup,
      'positionInCategory': instance.positionInCategory,
      'manufacturerName': instance.manufacturerName,
      'quantity': instance.quantity,
      'type': instance.type,
      'idShopDefault': instance.idShopDefault,
      'reference': instance.reference,
      'supplierReference': instance.supplierReference,
      'location': instance.location,
      'width': instance.width,
      'height': instance.height,
      'depth': instance.depth,
      'weight': instance.weight,
      'quantityDiscount': instance.quantityDiscount,
      'ean13': instance.ean13,
      'isbn': instance.isbn,
      'upc': instance.upc,
      'mpn': instance.mpn,
      'cacheIsPack': instance.cacheIsPack,
      'cacheHasAttachments': instance.cacheHasAttachments,
      'isVirtual': instance.isVirtual,
      'state': instance.state,
      'additionalDeliveryTimes': instance.additionalDeliveryTimes,
      'deliveryInStock': instance.deliveryInStock,
      'deliveryOutStock': instance.deliveryOutStock,
      'productType': instance.productType,
      'onSale': instance.onSale,
      'onlineOnly': instance.onlineOnly,
      'ecotax': instance.ecotax,
      'minimalQuantity': instance.minimalQuantity,
      'lowStockThreshold': instance.lowStockThreshold,
      'lowStockAlert': instance.lowStockAlert,
      'price': instance.price,
      'wholesalePrice': instance.wholesalePrice,
      'unity': instance.unity,
      'unitPriceRatio': instance.unitPriceRatio,
      'additionalShippingCost': instance.additionalShippingCost,
      'customizable': instance.customizable,
      'textFields': instance.textFields,
      'uploadableFiles': instance.uploadableFiles,
      'active': instance.active,
      'redirectType': instance.redirectType,
      'idTypeRedirected': instance.idTypeRedirected,
      'availableForOrder': instance.availableForOrder,
      'availableDate': instance.availableDate?.toIso8601String(),
      'showCondition': instance.showCondition,
      'condition': instance.condition,
      'showPrice': instance.showPrice,
      'indexed': instance.indexed,
      'visibility': instance.visibility,
      'advancedStockManagement': instance.advancedStockManagement,
      'dateAdd': instance.dateAdd?.toIso8601String(),
      'dateUpd': instance.dateUpd?.toIso8601String(),
      'packStockType': instance.packStockType,
      'metaDescription': instance.metaDescription,
      'metaKeywords': instance.metaKeywords,
      'metaTitle': instance.metaTitle,
      'linkRewrite': instance.linkRewrite,
      'name': instance.name,
      'description': instance.description,
      'descriptionShort': instance.descriptionShort,
      'availableNow': instance.availableNow,
      'availableLater': instance.availableLater,
      'priceTaxIncluded': instance.priceTaxIncluded,
      'priceTaxExcluded': instance.priceTaxExcluded,
      'associations': instance.associations,
    };
